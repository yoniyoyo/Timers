#include  "prelab5_bsp.h"

             NAME   MAIN
             PUBLIC state,main,state0,rem,division_result,prev_TA1CCR2,delta,buffer
             EXTERN SysConfig,ClrLEDs,IncLED,RotLED ,delay,startCLK_A1,prntscrn_hz
             EXTERN PrintLEDs,ReadSWs,PrintSWs2LEDs,ClrLEDs,PWM_alt,DT_alt
             EXTERN printtolcdtest, Lcd_strobe,LCDsetup,prntscrn_0100,startCLK_A0,SetupBT,prntscrn_mfreq
             PUBLIC   thounsands10,thounsands,hundreds,tens ,ones ,hexnum,flag_1
             
;----------------------------------------------------------------------------------
             ORG      DataSegStart         ; Begins a DATA segment
             
state               DW   0                        ; state variable
flag_1              DW   0
buffer              DW   0
division_result     DW  0
rem                 DW  0
prev_TA1CCR2        DW  500
delta               DW  0
thounsands10 dw 48
thounsands   dw 48
hundreds     dw 48
tens         dw 48
ones         dw 48
hexnum       dw 0

;-------------------------------------------------------------------------------------          
             ;RSEG    CSTACK    ; shows to compiler where is the RAM populating limit
                                ; can be ignored
;-------------------------------------------------------------------------------------
             ORG     CodeSegStart       ; Program Reset = Begins a CODE segment
             
main         mov.w   #StackTosStart,SP  ; Initialize stack pointer to the RAM end 
             call    #SysConfig
             call    #LCDsetup
             clr     state              ; set to idle state at the beginning
;---------------------- FSM_loop -------------------------------------
state0       cmp     #0x00,state         ;check if state0           
             jnz     state1
             bis.w   #CPUOFF+GIE,SR 

state1        cmp     #0x01,state         ;check if state1
              jnz     state2  
              eint
              call    #prntscrn_0100
              call    #startCLK_A0
              bis.w   #CPUOFF+GIE,SR
  
            
state2       cmp     #0x02,state         ;check if state2
             jnz     state0 
             eint
             call #prntscrn_mfreq
             call #startCLK_A1
             
             bis.w   #CPUOFF+GIE,SR

;state3       cmp     #0x03,state         ;check if state3
             ;jnz     state4 
            ; call    #PWM_alt            ;infinite function
             
;state4       cmp     #0x04,state         ;check if state3
             ;jnz     state0 
             ;call    #DT_alt            ;infinite function             
            

             jmp     state0       
                 
             END
               
